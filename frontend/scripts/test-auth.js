#!/usr/bin/env node

/**
 * Script de test automatis√© pour l'authentification
 * Usage: node scripts/test-auth.js
 */

const axios = require('axios');

// Configuration
const BASE_URL = process.env.NEXT_PUBLIC_API_URL || 'http://localhost:3000';
const TEST_EMAIL = 'test@example.com';
const TEST_PASSWORD = 'password123';

async function testAuthFlow() {
  console.log('üß™ === TEST D\'AUTHENTIFICATION ===\n');

  try {
    // 1. Test de login
    console.log('1Ô∏è‚É£ Test de login...');
    const loginResponse = await axios.post(`${BASE_URL}/api/auth/login`, {
      email: TEST_EMAIL,
      password: TEST_PASSWORD
    });
    
    console.log('‚úÖ Login r√©ussi');
    console.log('Tokens re√ßus:', {
      accessToken: loginResponse.data.accessToken ? '‚úÖ Pr√©sent' : '‚ùå Absent',
      refreshToken: loginResponse.data.refreshToken ? '‚úÖ Pr√©sent' : '‚ùå Absent'
    });

    // 2. Test de r√©cup√©ration des permissions
    console.log('\n2Ô∏è‚É£ Test de r√©cup√©ration des permissions...');
    const permissionsResponse = await axios.get(`${BASE_URL}/api/auth/me`, {
      headers: {
        'Authorization': `Bearer ${loginResponse.data.accessToken}`
      }
    });
    
    console.log('‚úÖ Permissions r√©cup√©r√©es');
    console.log('Permissions:', permissionsResponse.data.permissions?.length || 0, 'trouv√©es');

    // 3. Test de refresh token
    console.log('\n3Ô∏è‚É£ Test de refresh token...');
    const refreshResponse = await axios.post(`${BASE_URL}/api/auth/refresh-token`, {}, {
      headers: {
        'Cookie': `refreshToken=${loginResponse.data.refreshToken}`
      }
    });
    
    console.log('‚úÖ Refresh token r√©ussi');
    console.log('Nouveau access token:', refreshResponse.data.accessToken ? '‚úÖ Pr√©sent' : '‚ùå Absent');

    // 4. Test de logout
    console.log('\n4Ô∏è‚É£ Test de logout...');
    await axios.post(`${BASE_URL}/api/auth/logout`, {}, {
      headers: {
        'Authorization': `Bearer ${refreshResponse.data.accessToken}`
      }
    });
    
    console.log('‚úÖ Logout r√©ussi');

    console.log('\nüéâ Tous les tests sont pass√©s avec succ√®s !');

  } catch (error) {
    console.error('\n‚ùå Erreur lors du test:', error.message);
    
    if (error.response) {
      console.error('Status:', error.response.status);
      console.error('Data:', error.response.data);
    }
    
    process.exit(1);
  }
}

// Fonction pour tester les permissions sp√©cifiques
async function testPermissions() {
  console.log('\nüîë === TEST DES PERMISSIONS ===\n');

  try {
    // Login d'abord
    const loginResponse = await axios.post(`${BASE_URL}/api/auth/login`, {
      email: TEST_EMAIL,
      password: TEST_PASSWORD
    });

    // R√©cup√©rer les permissions
    const permissionsResponse = await axios.get(`${BASE_URL}/api/auth/me`, {
      headers: {
        'Authorization': `Bearer ${loginResponse.data.accessToken}`
      }
    });

    const permissions = permissionsResponse.data.permissions || [];
    
    console.log('Permissions trouv√©es:');
    permissions.forEach(permission => {
      console.log(`- ${permission.domain}:`, {
        read: permission.can_read ? '‚úÖ' : '‚ùå',
        create: permission.can_create ? '‚úÖ' : '‚ùå',
        edit: permission.can_edit ? '‚úÖ' : '‚ùå',
        delete: permission.can_delete ? '‚úÖ' : '‚ùå'
      });
    });

    // Test des domaines sp√©cifiques
    const testDomains = ['dashboard', 'users', 'contacts', 'reports', 'settings'];
    console.log('\nTest des domaines:');
    
    testDomains.forEach(domain => {
      const permission = permissions.find(p => p.domain === domain);
      if (permission) {
        console.log(`‚úÖ ${domain}: Permission trouv√©e`);
      } else {
        console.log(`‚ùå ${domain}: Permission manquante`);
      }
    });

  } catch (error) {
    console.error('‚ùå Erreur lors du test des permissions:', error.message);
  }
}

// Ex√©cution des tests
async function runTests() {
  await testAuthFlow();
  await testPermissions();
}

// V√©rification des variables d'environnement
function checkEnvironment() {
  console.log('üîß === V√âRIFICATION DE L\'ENVIRONNEMENT ===\n');
  
  const requiredVars = [
    'NEXT_PUBLIC_API_URL',
    'JWT_SECRET'
  ];

  requiredVars.forEach(varName => {
    const value = process.env[varName];
    if (value) {
      console.log(`‚úÖ ${varName}: D√©fini`);
    } else {
      console.log(`‚ùå ${varName}: Non d√©fini`);
    }
  });

  console.log(`\nüåê URL de base: ${BASE_URL}`);
  console.log('');
}

// Main
if (require.main === module) {
  checkEnvironment();
  runTests().catch(console.error);
}

module.exports = { testAuthFlow, testPermissions }; 